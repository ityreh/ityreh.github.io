{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Wikityreh This Wiki is a starting point for software development projects and one of my electronic memories. Basic hints for Software Development This is a list of methods and paradigms that help me getting better in software development. Setup a mouseless development environment To setup my mouseless development environment I followed this book by Matthieu Cneude and I really recommend it. The mouseless development environment is about using the mouse as less as possible to feel more comfortable and be more productive as a developer. You will see what I mean when you start using this approach in your daily development. Follow the 12 factor app guide The 12 factor app guide is a really good list of methodologies building software. Clean Code Source code is read much more often than it is written, so it is important to keep the code clean. What this means is explained by Robert C. Martin in his book Clean Code.","title":"Home"},{"location":"#wikityreh","text":"This Wiki is a starting point for software development projects and one of my electronic memories.","title":"Wikityreh"},{"location":"#basic-hints-for-software-development","text":"This is a list of methods and paradigms that help me getting better in software development.","title":"Basic hints for Software Development"},{"location":"#setup-a-mouseless-development-environment","text":"To setup my mouseless development environment I followed this book by Matthieu Cneude and I really recommend it. The mouseless development environment is about using the mouse as less as possible to feel more comfortable and be more productive as a developer. You will see what I mean when you start using this approach in your daily development.","title":"Setup a mouseless development environment"},{"location":"#follow-the-12-factor-app-guide","text":"The 12 factor app guide is a really good list of methodologies building software.","title":"Follow the 12 factor app guide"},{"location":"#clean-code","text":"Source code is read much more often than it is written, so it is important to keep the code clean. What this means is explained by Robert C. Martin in his book Clean Code.","title":"Clean Code"},{"location":"about/","text":"About","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"database/","text":"Setup local development environment databases Use docker to setup a local development environment with databases. PostgreSQL (relational) First you have to pull the docker images and create a directory for the test data. 1 2 docker pull postgresql pgadmin mkdir ${ home } /postgres-data Copy the setup to a script e.g. in a bin folder in your project bin/setup-local-test.sh . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #!/bin/sh # Database export DATABASE_DEFAULT_NAME = ecom-dev-db export DATABASE_DEFAULT_USER = postgres export DATABASE_DEFAULT_PASSWORD = Passw0rd! export DATABASE_DEFAULT_HOST = localhost export DATABASE_DEFAULT_PORT = 5432 docker run \\ -d --name $DATABASE_DEFAULT_NAME \\ -e POSTGRES_PASSWORD = $DATABASE_DEFAULT_PASSWORD \\ -v ${ HOME } /postgres-data/:/var/lib/postgresql/data \\ -p $DATABASE_DEFAULT_PORT : $DATABASE_DEFAULT_PORT \\ $DATABASE_DEFAULT_USER docker run \\ -p 80 :80 \\ -e 'PGADMIN_DEFAULT_EMAIL=admin@test.local' \\ -e 'PGADMIN_DEFAULT_PASSWORD=Passw0rd!' \\ --name pgadmin-dev \\ -d dpage/pgadmin4 When the containers are up and running, you can get the IPAdress of your postgresql server with the following command. Use it to connect with your local DB in pgadmin. 1 docker inspect <db-name> -f \"{{json .NetworkSettings.Networks }}\" MongoDB (no-sql document) Redis (in-memory)","title":"Database"},{"location":"database/#setup-local-development-environment-databases","text":"Use docker to setup a local development environment with databases.","title":"Setup local development environment databases"},{"location":"database/#postgresql-relational","text":"First you have to pull the docker images and create a directory for the test data. 1 2 docker pull postgresql pgadmin mkdir ${ home } /postgres-data Copy the setup to a script e.g. in a bin folder in your project bin/setup-local-test.sh . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #!/bin/sh # Database export DATABASE_DEFAULT_NAME = ecom-dev-db export DATABASE_DEFAULT_USER = postgres export DATABASE_DEFAULT_PASSWORD = Passw0rd! export DATABASE_DEFAULT_HOST = localhost export DATABASE_DEFAULT_PORT = 5432 docker run \\ -d --name $DATABASE_DEFAULT_NAME \\ -e POSTGRES_PASSWORD = $DATABASE_DEFAULT_PASSWORD \\ -v ${ HOME } /postgres-data/:/var/lib/postgresql/data \\ -p $DATABASE_DEFAULT_PORT : $DATABASE_DEFAULT_PORT \\ $DATABASE_DEFAULT_USER docker run \\ -p 80 :80 \\ -e 'PGADMIN_DEFAULT_EMAIL=admin@test.local' \\ -e 'PGADMIN_DEFAULT_PASSWORD=Passw0rd!' \\ --name pgadmin-dev \\ -d dpage/pgadmin4 When the containers are up and running, you can get the IPAdress of your postgresql server with the following command. Use it to connect with your local DB in pgadmin. 1 docker inspect <db-name> -f \"{{json .NetworkSettings.Networks }}\"","title":"PostgreSQL (relational)"},{"location":"database/#mongodb-no-sql-document","text":"","title":"MongoDB (no-sql document)"},{"location":"database/#redis-in-memory","text":"","title":"Redis (in-memory)"},{"location":"integration/","text":"Anwendungsintegration Setup Camel-K locally on Minikube 1 2 3 4 5 6 7 minikube start minikube addon enable registry helm repo add camel-k https://apache.github.io/camel-k/charts export REGISTRY_ADDRESS=$(kubectl -n kube-system get service registry -o jsonpath='{.spec.clusterIP}') helm install --generate-name --set platform.build.registry.address=${REGISTRY_ADDRESS} --set platform.build.registry.insecure=true camel-k/camel-k You can have a look at the running pods with 1 kubectl get pod and you can list all releases with 1 helm list You can install the camel-k CLI \"kamel\" by extracting it to /usr/bin . Camel-K Helm Chart Camel-K CLI Release Troubleshooting CrashLoopBackOff - dial tcp 10.96.0.1:443: connect: network is unreachable Check the information about the client-server status of Kubernetes 1 kubectl config view Set the right context 1 kubectl config use-context minikube https://stackoverflow.com/questions/49260135/unable-to-connect-to-the-server-dial-tcp-i-o-time-out","title":"Integration"},{"location":"integration/#anwendungsintegration","text":"","title":"Anwendungsintegration"},{"location":"integration/#setup-camel-k-locally-on-minikube","text":"1 2 3 4 5 6 7 minikube start minikube addon enable registry helm repo add camel-k https://apache.github.io/camel-k/charts export REGISTRY_ADDRESS=$(kubectl -n kube-system get service registry -o jsonpath='{.spec.clusterIP}') helm install --generate-name --set platform.build.registry.address=${REGISTRY_ADDRESS} --set platform.build.registry.insecure=true camel-k/camel-k You can have a look at the running pods with 1 kubectl get pod and you can list all releases with 1 helm list You can install the camel-k CLI \"kamel\" by extracting it to /usr/bin . Camel-K Helm Chart Camel-K CLI Release","title":"Setup Camel-K locally on Minikube"},{"location":"integration/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"integration/#crashloopbackoff-dial-tcp-109601443-connect-network-is-unreachable","text":"Check the information about the client-server status of Kubernetes 1 kubectl config view Set the right context 1 kubectl config use-context minikube https://stackoverflow.com/questions/49260135/unable-to-connect-to-the-server-dial-tcp-i-o-time-out","title":"CrashLoopBackOff - dial tcp 10.96.0.1:443: connect: network is unreachable"},{"location":"language/","text":"Best practices for some programming languages This article is about best practices and usefull hints that are specific to a programming language. Python TODO: virtualenv, virtualenvwrapper Dependency management with requirement files You can write a requirements.txt to manage your project dependencies. Write it in the form 1 <package_name>=<version> or you can write use pip 1 pip freeze > requirements.txt Sometimes it is usefull to have multiple requirement files, eg. for different stages like requriements/local.txt , requirements/staging.txt and requirements/production.txt . This files can import a requirements/base.txt file, which includes packages that are used in all stages. 1 2 3 -r base.txt ...","title":"Language"},{"location":"language/#best-practices-for-some-programming-languages","text":"This article is about best practices and usefull hints that are specific to a programming language.","title":"Best practices for some programming languages"},{"location":"language/#python","text":"TODO: virtualenv, virtualenvwrapper","title":"Python"},{"location":"language/#dependency-management-with-requirement-files","text":"You can write a requirements.txt to manage your project dependencies. Write it in the form 1 <package_name>=<version> or you can write use pip 1 pip freeze > requirements.txt Sometimes it is usefull to have multiple requirement files, eg. for different stages like requriements/local.txt , requirements/staging.txt and requirements/production.txt . This files can import a requirements/base.txt file, which includes packages that are used in all stages. 1 2 3 -r base.txt ...","title":"Dependency management with requirement files"},{"location":"starter/","text":"Starter The starters help you kick off into a project so you can get started right away. Django TODO: cookiecutter for project layout templating? django-environ? Initialize your django application in your project folder and change base layout. 1 2 3 4 django-admin startproject config mv ./config/manage.py . mv ./config/config/* ./config rm -R ./config/config Create multiple environment specific settings and requirements files. 1 2 3 mkdir ./config/settings touch ./config/settings/__init__.py mv ./config/settings.py ./config/settings/base.py You can create specific settings which imports base.py , eg. local.py , staging.py or production.py : 1 2 3 from .base import * ... Do the same with your requirements . Start an app: 1 python manage.py startapp <app_name> React Electron Initialize your react client in your project folder and cd into the client folder. 1 2 create-react-app client cd client From there install electron and a package to detect if it runs in a development or production environment. 1 2 npm install --save-dev electron npm install electron-is-dev We create the main electron script in public/ as electron.js and enter the following code. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 const path = require ( \"path\" ); const { app , BrowserWindow } = require ( \"electron\" ); const isDev = require ( \"electron-is-dev\" ); function createWindow () { const win = new BrowserWindow ({ width : 800 , height : 600 , webPreferences : { nodeIntegration : true } }); win . loadURL ( isDev ? \"http://localhost:3000\" : `file:// ${ path . join ( __dirname , \"../build/index.html\" ) } ` ); if ( isDev ) { win . webContents . openDevTools ({ mode : \"detach\" }); } } app . whenReady (). then ( createWindow ); app . on ( \"window-all-closed\" , () => { if ( process . platform !== \"darwin\" ) { app . quit (); } }); app . on ( \"activate\" , () => { if ( BrowserWindow . getAllWindows (). length === 0 ) { createWindow (); } }); In package.json you can configure this script as the starting point. 1 2 3 { \"main\" : \"public/electron.js\" , // Add s tart i n g poi nt here } Now we configure the behavior for starting our development environment and we use two more packages for it. 1 npm i --save-dev concurrently wait-on The configuration is done in the package.json again. 1 2 3 4 5 6 { \"scripts\" : { \"dev\" : \"concurrently -k \\\"BROWSER=none npm start\\\" \\\"npm:electron\\\"\" , \"electron\" : \"wait-on tcp:3000 && electron .\" , } } To run the app in development mode, you can use npm run dev .","title":"Starter"},{"location":"starter/#starter","text":"The starters help you kick off into a project so you can get started right away.","title":"Starter"},{"location":"starter/#django","text":"TODO: cookiecutter for project layout templating? django-environ? Initialize your django application in your project folder and change base layout. 1 2 3 4 django-admin startproject config mv ./config/manage.py . mv ./config/config/* ./config rm -R ./config/config Create multiple environment specific settings and requirements files. 1 2 3 mkdir ./config/settings touch ./config/settings/__init__.py mv ./config/settings.py ./config/settings/base.py You can create specific settings which imports base.py , eg. local.py , staging.py or production.py : 1 2 3 from .base import * ... Do the same with your requirements . Start an app: 1 python manage.py startapp <app_name>","title":"Django"},{"location":"starter/#react-electron","text":"Initialize your react client in your project folder and cd into the client folder. 1 2 create-react-app client cd client From there install electron and a package to detect if it runs in a development or production environment. 1 2 npm install --save-dev electron npm install electron-is-dev We create the main electron script in public/ as electron.js and enter the following code. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 const path = require ( \"path\" ); const { app , BrowserWindow } = require ( \"electron\" ); const isDev = require ( \"electron-is-dev\" ); function createWindow () { const win = new BrowserWindow ({ width : 800 , height : 600 , webPreferences : { nodeIntegration : true } }); win . loadURL ( isDev ? \"http://localhost:3000\" : `file:// ${ path . join ( __dirname , \"../build/index.html\" ) } ` ); if ( isDev ) { win . webContents . openDevTools ({ mode : \"detach\" }); } } app . whenReady (). then ( createWindow ); app . on ( \"window-all-closed\" , () => { if ( process . platform !== \"darwin\" ) { app . quit (); } }); app . on ( \"activate\" , () => { if ( BrowserWindow . getAllWindows (). length === 0 ) { createWindow (); } }); In package.json you can configure this script as the starting point. 1 2 3 { \"main\" : \"public/electron.js\" , // Add s tart i n g poi nt here } Now we configure the behavior for starting our development environment and we use two more packages for it. 1 npm i --save-dev concurrently wait-on The configuration is done in the package.json again. 1 2 3 4 5 6 { \"scripts\" : { \"dev\" : \"concurrently -k \\\"BROWSER=none npm start\\\" \\\"npm:electron\\\"\" , \"electron\" : \"wait-on tcp:3000 && electron .\" , } } To run the app in development mode, you can use npm run dev .","title":"React Electron"},{"location":"vcs/","text":"Version Control System Conventional Commits Source Format: <type>[(scope)][!]: <description> Scopes are optional and can be any keyword. Use the optional ! to mark breaking changes. Types Type When to use build Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm) chore Changes that do not modify src or test files ci Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs) docs Documentation only changes feat A new feature fix A bug fix perf A code change that improves performance refactor A code change that neither fixes a bug nor adds a feature style Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc) test Adding missing tests or correcting existing tests","title":"VCS"},{"location":"vcs/#version-control-system","text":"","title":"Version Control System"},{"location":"vcs/#conventional-commits","text":"Source Format: <type>[(scope)][!]: <description> Scopes are optional and can be any keyword. Use the optional ! to mark breaking changes.","title":"Conventional Commits"},{"location":"vcs/#types","text":"Type When to use build Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm) chore Changes that do not modify src or test files ci Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs) docs Documentation only changes feat A new feature fix A bug fix perf A code change that improves performance refactor A code change that neither fixes a bug nor adds a feature style Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc) test Adding missing tests or correcting existing tests","title":"Types"}]}